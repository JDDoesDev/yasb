// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Follows {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  follower   User     @relation(fields: [followerId], references: [id])
  followerId Int      @unique
  followDate String
}

model Subs {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  sub          User     @relation(fields: [subId], references: [id])
  subId        Int    @unique
  subDateOrig  String
  subDateRenew String
  streak       Int
  totMonths    Int
}

model Bits {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  cheerDate String
  bitCount  Int
}

model GiftSubs {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  gifter       User     @relation(fields: [gifterId], references: [id])
  gifterId     Int      @unique
  totAmount    Int
  lastGiftDate String
  lastGiftSubs Int
}

model Credentials { // Credentials for the Twitch API provided by Twitch
  id           Int      @id @default(autoincrement())
  clientId     String   @unique
  clientSecret String   @unique
}

model Tokens { // Tokens for the Twitch API provided by Twitch with refresh.
  id           Int      @id @default(autoincrement())
  isBroadcaster Boolean @unique
  accessToken  String
  refreshToken String
  obtainmentTimestamp Int
  expiresIn    Int
  scope        String
  user         AppUser @relation(fields: [isBroadcaster], references: [isBroadcaster])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userName  String   @unique
  userDisplayName String
  badges    String?
  profileImageUrl String?
  subs      Subs?
  follows   Follows?
  bits      Bits[]
  giftSubs  GiftSubs?
}

model AppUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userName  String   @unique
  userDisplayName String
  userId    Int?      @unique
  isBroadcaster Boolean @default(false) @unique
  tokens    Tokens?
}

// model Viewer {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   userName  String   @unique
//   userDisplayName String
//   badges    String?
//   profileImageUrl String?
//   subs      Subs?
//   follows   Follows?
//   bits      Bits[]
//   giftSubs  GiftSubs?
// }
