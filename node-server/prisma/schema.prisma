// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Follows {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  follower   Viewer   @relation(fields: [followerId], references: [id])
  followerId Int      @unique
  followDate String
}

model Subs {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  sub          Viewer   @relation(fields: [subId], references: [id])
  subId        Int      @unique
  subDateOrig  String
  subDateRenew String
  streak       Int
  totMonths    Int
}

model Bits {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      Viewer   @relation(fields: [userId], references: [id])
  userId    Int
  cheerDate String
  bitCount  Int
}

model GiftSubs {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  gifter       Viewer   @relation(fields: [gifterId], references: [id])
  gifterId     Int      @unique
  totAmount    Int
  lastGiftDate String
  lastGiftSubs Int
}

model Credentials {
  id           Int    @id @default(autoincrement())
  clientId     String @unique
  clientSecret String @unique
}

model Tokens {
  id                  Int     @id @default(autoincrement())
  accessToken         String
  refreshToken        String
  obtainmentTimestamp BigInt     @default(0)
  expiresIn           Int     @default(0)
  scope               String
  User             User @relation(fields: [AppUserName], references: [userName])
  AppUserName         String  @unique
}

// model User {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   userName  String   @unique
//   userDisplayName String
//   badges    String?
//   profileImageUrl String?
//   subs      Subs?
//   follows   Follows?
//   bits      Bits[]
//   giftSubs  GiftSubs?
// }

model User {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  userName        String   @unique
  userDisplayName String?
  userId          String?     @unique
  isBroadcaster   Boolean  @unique @default(false)
  profileImageUrl String?
  tokens          Tokens?
}

model Viewer {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  userName        String    @unique
  userDisplayName String
  badges          String?
  profileImageUrl String?
  subs            Subs?
  follows         Follows?
  bits            Bits[]
  giftSubs        GiftSubs?
}
